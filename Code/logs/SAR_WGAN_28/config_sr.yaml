DATASET:
  NAME: SAR
  PARAMETERS:
    train_datapath: "Code/npy/train/" # "/gpfs/workdir/fix_jer/Datasets/2022-SONDRA/raw_data_2x8/train/" 
    valid_datapath: "Code/npy/train/" # "/gpfs/workdir/fix_jer/Datasets/2022-SONDRA/raw_data_2x8/valid/" 
    batch_size: 25
    transform: "to_db_complex"
    subsample_factor: 1
    image_size: 256
    num_workers: 8
    length: -1  # -1 means almost 3M patches with stride 1
    stride: 20
    random_subset: True # Randomly takes a subset of the samples at each epoch

TRAIN:
  EPOCH: 8000

  MODE:
    NAME: "TrainerWGAN"
    PARAMETERS:
      n_iterations_disc: 5
      gp_weight: 10

  LOGGING:
    TOP_LOG_DIR: 
    RUN_NAME: "SAR_WGAN"
    MIN_EPOCH_CKP: 0
    STEP_CKP: 5
    TRANSFORM_IMAGE: None
    N_IMAGES: 16
    WANDB:
      project: "cei_complex_gan"
      entity: "sargan"

  LOSS:
    NAME: "MSE"

  OPTIMIZER_GENERATOR:
    NAME: "Adam"
    PARAMETERS:
      lr: 3.0e-5
      weight_decay: 0
      betas:
        - 0.5
        - 0.9

  OPTIMIZER_DISCRIMINATOR:
    NAME: "Adam"
    PARAMETERS:
      lr: 3.0e-5
      weight_decay: 0
      betas:
        - 0.5
        - 0.9

  SCHEDULER:
    # NAME: "StepLR"
    # PARAMETERS:
    #   step_size: 500
    #   gamma: 0.5

DISCRIMINATOR:
  NAME:
    "CNN_Discriminator"
  PARAMETERS:
    # Number of layers of the DCNN
    num_conv_layers: 8
    # Multiplicator of the channels for the successive convolutional layers
    channels_multiplicator: 2
    # Apply pooling every <step_pooling> layers
    step_pooling: 1
    # Maximum number of channels for the convolutional layers
    max_channels: 256 #512
    # Number of filter of the initial Convolutional Layer
    num_filter: 32
    # Min spatial size in the convolution layers
    min_spatial_size: 4
    kernel_size_conv: 3
    stride_conv: 2 #1
    padding_conv: 1
    batch_norm: False
    activation: "CELU" 

GENERATOR:
  NAME:
    "CNN_Generator"
  PARAMETERS:
    # Output channels of the generator
    output_channels: 1
    # Latent space dimension
    latent_dim: 256 # 512
    # Number of layers of the DCNN
    num_conv_layers: 8
    # Multiplicator of the channels for the successive convolutional layers
    channels_multiplicator: 0.8 # 2
    # Apply upsample convolution every <step_upsample> layers
    step_upsample: 1
    # Number of filter of the initial Convolutional Layer
    num_filter: 64 # 256 # 512
    # Size of the first 2D image in the first layer
    size_first: 64 # 2
    kernel_size_conv: 3
    stride_conv: 1
    padding_conv: 1
    batch_norm: False
    activation: "CELU"
